// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma-client" // Path to generated client
// }
// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id        Int      @id @default(autoincrement()) // Primary key
  userName  String                         // Unique username
  email     String   @unique                      // Unique email
  password  String    
  role      Role      @default(ADMIN)
   carts     Cart?  
   productReview ProductReview[]             
  address    Address[]
  order       Order[]           // Hashed password
  createdAt DateTime @default(now())              // Timestamp for creation
  updatedAt DateTime @updatedAt                   // Timestamp for last update
}
enum Role{
  USER
  ADMIN
}


// model Products {
//   id Int @id @default(autoincrement()) // Primary key
//   productName  String?                        
//   description String
//   brand String
//   category String
//   sku  String
//   // specs 
//   displaySize String?
//   displaytype String?
//   resolution String?
//   refreshRate String?
//   // camera 
//   backCamera String?
//   frontCamera String?
// // storage 
// storage String?
//   // battery and Charging 
//   battery String?
//   charging String?
//   usbPort  String?
//   network String?  
//   sim String?
//   os String?
//   processor String?
//   untututu String?
//   price Int?
//   salePrice  Int?
//   stock Int? 
//   stockStatus String?  
//   image     String[]
//   colors     String[]   
//   cartItems   CartItem[]   

//   productReview ProductReview[] // One-to-many relationship with ProductReview
//   averageRating Float @default(0) // Average rating for the product          
//   // cartItems    CartItem[]                              
//   createdAt DateTime @default(now())              // Timestamp for creation
//   updatedAt DateTime @updatedAt                   // Timestamp for last update
// }

model Products {
  id Int @id @default(autoincrement()) // Primary key
  productName  String?                        
  description String
  brand String
  category String
  sku  String
  // specs 
  specs Json?
  
  price Int?
  salePrice  Int?
  stock Int? 
  stockStatus String?  
  image     String[]
  colors     String[]   
  cartItems   CartItem[]   

  productReview ProductReview[] // One-to-many relationship with ProductReview
  averageRating Float @default(0) // Average rating for the product          
  // cartItems    CartItem[]                              
  createdAt DateTime @default(now())              // Timestamp for creation
  updatedAt DateTime @updatedAt                   // Timestamp for last update
}


model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int          @unique
  users     Users        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  products  Products @relation(fields: [productId], references: [id])
  productId Int      // Define the foreign key field
  quantity  Int
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([cartId, productId]) // Composite unique constraint
}

model Address {
   id        Int         @id @default(autoincrement())

  userId     Int
  users       Users     @relation(fields: [userId], references: [id])
  addressName       String
  address    String
  city       String
  // country    String
  postelCode String
  phone      String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order     Order[]

  @@index([userId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId        Int
  users          Users          @relation(fields: [userId], references: [id])
  addressId     Int
  address       Address       @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  // couponId      String?
  // coupon        Coupon?       @relation(fields: [couponId], references: [id])
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod   @default(CASH_ON_Delivery)    
  paymentStatus PaymentStatus @default(PENDING)
 paymentId     Int?  @default(0)
payerId       Int?  @default(0)              
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([addressId])
  // @@index([couponId])
}

model OrderItem {
  id        Int         @id @default(autoincrement())
  orderId         Int
  order           Order    @relation(fields: [orderId], references: [id])
  productId       Int
  productName     String
  productCategory String
  quantity        Int
    image           String? // <-- Add this line
  // size            String?
  // color           String?
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}



enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_Delivery
}

enum PaymentStatus {
  PENDING
  COMPLETED
}


model ProductReview {
    id        Int         @id @default(autoincrement())
   products  Products @relation(fields: [productId], references: [id])
  productId Int      // Define the foreign key field
  //  userId    Int          @unique
   userId    Int          

  users     Users        @relation(fields: [userId], references: [id])
  // userName      String
  name      String
  email     String
  images String[]
  reviewMessage String
  rating   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}





