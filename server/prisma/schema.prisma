// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma-client" // Path to generated client
// }
// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id        Int      @id @default(autoincrement()  ) // Primary key
  userName  String                         // Unique username
  email     String   @unique                      // Unique email
  password  String    
  role      Role      @default(ADMIN)
   carts     Cart?                          // Hashed password
  createdAt DateTime @default(now())              // Timestamp for creation
  updatedAt DateTime @updatedAt                   // Timestamp for last update
}
enum Role{
  USER
  ADMIN
}


model Products {
  id        Int      @id @default(autoincrement()) // Primary key
  productName  String?                        
  description String
  brand String
  category String
  sku  String
  // specs 
  displaySize String?
  displaytype String?
  resolution String?
  refreshRate String?
  // camera 
  backCamera String?
  frontCamera String?
// storage 
storage String?
  // battery and Charging 
  battery String
  charging String
  usbPort  String
  network String?  
  sim String?
  os String?
  processor String?
  untututu String?
  price Int
  salePrice  Int
  stock Int 
  stockStatus String  
  image     String[]
  colors     String[]                       
  // cartItems    CartItem[]                              
  createdAt DateTime @default(now())              // Timestamp for creation
  updatedAt DateTime @updatedAt                   // Timestamp for last update
}


model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int          @unique
  users     Users        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  // product   Products  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  @@unique([cartId, productId]) // Composite unique constraint
}
